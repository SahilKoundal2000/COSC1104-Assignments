import os
import csv
from datetime import datetime

TASK_FILE = "tasks.csv"  # File to store the data

def load_tasks():
    """Loading tasks from the CSV file."""
    if not os.path.exists(TASK_FILE):
        return []  # Return empty list if file doesn't exist
    
    tasks = []
    with open(TASK_FILE, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            task = {
                "name": row["name"],
                "due_date": datetime.strptime(row["due_date"], "%Y-%m-%d"),
                "time_estimate": int(row["time_estimate"])
            }
            tasks.append(task)
    return tasks

def save_tasks(tasks):
    """Saving tasks to the CSV file."""
    with open(TASK_FILE, mode='w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=["name", "due_date", "time_estimate"])
        writer.writeheader()
        for task in tasks:
            writer.writerow({
                "name": task["name"],
                "due_date": task["due_date"].strftime("%Y-%m-%d"),
                "time_estimate": task["time_estimate"]
            })

def add_task():
    """Adding a new task."""
    name = input("Enter task name: ").strip()
    due_date = input("Enter due date (YYYY-MM-DD): ").strip()
    time_estimate = input("Enter estimate time it will take (in hours): ").strip()
    
    try:
        task = {
            "name": name,
            "due_date": datetime.strptime(due_date, "%Y-%m-%d"),
            "time_estimate": int(time_estimate)
        }
        tasks = load_tasks()
        tasks.append(task)
        save_tasks(tasks)
        print("Task added successfully!")
    except ValueError:
        print("Invalid input. Please try again.")

def view_upcoming_tasks():
    """Show all tasks sorted by due date."""
    tasks = sorted(load_tasks(), key=lambda x: x["due_date"])
    if tasks:
        print("\n--- Upcoming Tasks ---")
        for task in tasks:
            days_left = (task["due_date"] - datetime.now()).days
            status = "Past Due" if days_left < 0 else f"Due in {days_left} days"
            
            # Calculate study hours per day needed to complete the task
            if days_left > 0:
                daily_study = task["time_estimate"] / days_left
                print(f"{task['name']} - {task['time_estimate']} hours ({status}, Due: {task['due_date'].strftime('%Y-%m-%d')})")
                print(f"do {daily_study:.2f} hours per day to complete this task.")
            else:
                print(f"{task['name']} - {task['time_estimate']} hours ({status}, Due: {task['due_date'].strftime('%Y-%m-%d')})")
    else:
        print("No tasks to show!")

def main():
    """Main menu for user interaction."""
    while True:
        print("\n--- Study Planner ---")
        print("1. Add a Task")
        print("2. View Upcoming Tasks")
        print("3. Exit")
        
        choice = input("Enter your choice: ").strip()
        if choice == "1":
            add_task()
        elif choice == "2":
            view_upcoming_tasks()
        elif choice == "3":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
